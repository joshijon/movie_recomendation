# -*- coding: utf-8 -*-
"""movie_recomendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bPR2oNzs3EnVmxks5VCze7-ZR1X5AEDr
"""

import pandas as pd

movies=pd.read_csv('/content/top10K-TMDB-movies.csv')

movies.head()

movies.describe()

movies.info()

movies.isnull().sum()

"""Feature Selection part"""

movies.columns

movies=movies[['id', 'title', 'genre', 'overview']]

movies

movies['tags']=movies['overview']+movies['genre']

movies

new_data= movies.drop(columns=['overview','genre'])

new_data

"""Bag of word
TFID
"""

from sklearn.feature_extraction.text import CountVectorizer

cv=CountVectorizer(max_features=10000, stop_words='english')

cv

vector=cv.fit_transform(new_data['tags'].values.astype('U')).toarray()

vector.shape

from sklearn.metrics.pairwise import cosine_similarity

similarity=cosine_similarity(vector)

similarity

new_data[new_data['title']=="The Godfather"].index[0]

distance=sorted(list(enumerate(similarity[2])),reverse= True, key=lambda vector:vector[1])
for i in distance[0:5]:
  print(new_data.iloc[i[0]].title)



def recommend(movies):
  # Case-insensitive search for movie
    matching_movies = new_data[new_data['title'].str.lower() == movies.lower()]
    if matching_movies.empty:
        return f"Movie '{movies}' not found in the dataset."

    index= matching_movies.index[0]
    distance=sorted(list(enumerate(similarity[index])),reverse= True, key=lambda vector:vector[1])
    for i in distance[0:5]:
         print(new_data.iloc[i[0]].title)

print("Here are some movies you can choose from:\n")
print(new_data['title'].head(20).to_string(index=False))  # Show first 20 titles

#
# Ask user to pick a movie
user_input = input("\nEnter a movie title from the list above: ")

# Get recommendations
recommend(user_input)